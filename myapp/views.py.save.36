from django.shortcuts import render
from django.shortcuts import get_object_or_404, render
from django.views.decorators.cache import cache_page
from django.views.decorators.csrf import csrf_protect
from django.http import StreamingHttpResponse
from django.core.context_processors import csrf
from django.http import HttpResponseRedirect
from django import forms
from django.contrib.auth.forms import UserCreationForm
from django.views.decorators.csrf import csrf_exempt, csrf_protect
# Create your views here.
from django.core import serializers
from django.http import HttpResponse
from django.shortcuts import render
from django.shortcuts import render_to_response
from myapp.models import *
import myapp.views
from myapp.views import *
import json
import simplejson
import json as simplejson
#import pyotp
import os
import sys
from urllib2 import urlopen, HTTPError
import urllib
from urllib2 import Request, urlopen, URLError
import requests
from requests import *
from django.http import HttpResponse, HttpRequest, HttpResponseRedirect

from django.http import JsonResponse
from django.db.models import Q
import operator
import dpath.util
import random
#import pyodbc
import csv
def hello(request):
     a=5
     b=6
     if(a==5):
    #   return render(request,'index.html',{})
     
  #    return render_to_response('index.html',{})
    # if(b==6):
      return HttpResponse("welcome")
    #return ('test.html')
@csrf_exempt
def sendOTPmessageAPI(request):
 print "inside api call"
 print request.method
 data= request.body
 data = json.loads(data)
 print data
 mobile_number=data["mobileNumber"]
 print mobile_number
 #d2 = Otp.objects.raw('SELECT * FROM otp WHERE mobileNumber =%s', [mobile_number])
 d2 = Otp.objects.filter(mobilenumber = mobile_number)
 p = Otp.objects.filter(mobilenumber = mobile_number).count()
 print p
 data= serializers.serialize("json",d2)
 if(p==0):
  print "hello"
  new_obj = Otp()
  new_obj.pk=mobile_number
  otpnumber=random.randint(100000,999999)
  new_obj.otp=otpnumber
  new_obj.p_id=1
  new_obj.save()
  d2 = Otp.objects.filter(mobilenumber = mobile_number)
  data= serializers.serialize("json",d2)

 data = json.loads(data)
 print data
 otp=data[0]["fields"]["otp"]
 print otp
 message =  otp + " is One Time Password (OTP) for your Contree login verification. Please do not share it with anyone. WelcomeBack"
 print message
 url = ("http://alerts.solutionsinfini.com/api/v3/index.php?method=sms&api_key=A2da30c3f0e3f933485c8a7545dcaf895&to="+mobile_number+"&sender=Contri&message="+message)
#os.system('php -f url')
 t =requests.get(url)
 t1=json.loads(t.text)
 status=t1["status"]
 print status
 if(status=="OK"):
  print "messsage sent"
  
  c1={"status":"success","message":"message sent on this number"}
  return HttpResponse(json.dumps(c1),content_type="application/json")
 else:
  c1={"status":"error","message":"message not sent"}
  return HttpResponse(json.dumps(c1),content_type="application/json")

@csrf_exempt
def OTPVERIFY(request):
 print "inside api call"
 print request.method
 data= request.body
 data = json.loads(data)
 print data
 mobile_number=data["userNumber"]
 otpinput=data["otpInput"]
 print otpinput
 print mobile_number
 d2 = Otp.objects.filter(mobilenumber = mobile_number)
 data= serializers.serialize("json",d2)
 data = json.loads(data)
 otp=data[0]["fields"]["otp"]
 print otp
 if(otpinput==otp):
  
  c1={"status":"success","user":"bhagvat","message":"verification successful"}
  return HttpResponse(json.dumps(c1),content_type="application/json")
 else:
  c1={"status":"error","message":"incorrect otp"}
  return HttpResponse(json.dumps(c1),content_type="application/json")
def detaill2(request,store_id,message):
    mobile_number = request.GET.get('', store_id)
    message =request.GET.get('', message)
    print mobile_number
    print message
    d ={'mobile_number':mobile_number,'message':message}
    a= json.dumps(d)
    return HttpResponse(a)
def test(request,store_id):
  mobile_number = request.GET.get('', store_id)

  url= "http://52.66.113.94:7000/myapp/sendi/"+mobile_number    # api hitting
  t =requests.get(url)
  if(t.ok):
   print t.text
   print t.headers
   return HttpResponse(t,content_type="application/json" )  
  else:
   return HttpResponse(".raise_for_status()") 
  #  data=  User.objects.all()
   #for i in data:
  #ans_data={
 # "user_detail":data
 
    #print data.name
#    return HttpResponse(serializers.serialize("json", [User.objects.get(p_id=25)]))

#def expenseparticipent(request,user_data):
def detaill3(request,store_id):
  d= Expenseparticipants.objects.raw('SELECT * FROM Expenseparticipants WHERE participant = %s', [store_id])
 # return HttpResponse(serializers.serialize("json",d))
  d1=serializers.serialize("json",d,fields=('id','share','object','_created_at','id1','settled','_updated_at','participantname','participant','saved','deleted'))
  print len(d1)
  print "first"+d1
#  if(len(d1)==2)

  d2 = json.loads(d1)
  obj_data = (d2[0]["fields"]["object"])
  deleted_field = (d2[0]["fields"]["deleted"])

  print obj_data
  c1= json.loads(json.dumps(d2[0]))
 # return HttpResponse("json.dumps(c2),content_type=application/json")

  if(obj_data!='other'and deleted_field!=1 ):
    # if(p1 ==store_id):

   d3 = Runningexpenses.objects.raw('SELECT * FROM Runningexpenses WHERE id1 =%s', [obj_data])
 #  d3 =Runningexpenses.objects.filter(id1=obj_data)
   d4=serializers.serialize("json",d3,fields=('id','saved','agenda','name','contreemoney','date','_updated_at','_created_at','id1'))
   print "second"+d4
   if(len(d4)==2):
    d9={'Expenseparticipants':c1}
    fd=(json.dumps(d9,indent=2))
    return HttpResponse(fd, content_type="application/json")
   else:
    d5 = json.loads(d4)
    obj_data1 = (d5[0]["fields"]["id1"])
    c2=json.loads(json.dumps(d5[0]))
    d9={'Expenseparticipants':c1,'Runningexpenses':c2}
#    fd=(json.dumps(d9,indent=2))
 #   return HttpResponse(fd, content_type="application/json")

    t1=Updatelist.objects.raw('SELECT * FROM Updatelist WHERE object =%s', [obj_data])
    t2=serializers.serialize("json",t1,fields=('id','wperm','id1','object','updated_at','created_at','dist','type','expenseid'	,'new_val','rperm','acl','date','old_val'))
    print "updatelist"+ t2
    if(len(t2)==2 and obj_data1!=obj_data):
     d9={'Expenseparticipants':c1,'Runningexpenses':c2}
     fd=(json.dumps(d9,indent=2))
     return HttpResponse(fd, content_type="application/json")
    else:
      if(len(t2)!=2):
       t3=json.loads(t2)
       t4=json.loads(json.dumps(t3[0]))
       d9={'Expenseparticipants':c1,'Runningexpenses':c2,'Updatelist':t4}
      else:
        t4=t2
   
   #  fd=(json.dumps(d9,indent=2))
   #  return HttpResponse(fd, content_type="application/json")


  #return HttpResponse(json.dumps(c2),content_type="application/json")
     
   if(obj_data1== obj_data):
    d6 =Expensedetails.objects.filter(object = obj_data1) 
    d7=serializers.serialize("json",d6,fields=('id','_created_at','_id','description','_amount','_updated_at','object','addedby','shares','persons','distribution','own'))
    print "thrd"+d7
    if(len(d7)==2):
      if(len(t2)!=2):
        d9={'Expenseparticipants':c1,'Runningexpenses':c2,'Updatelist':t4}
        fd=(json.dumps(d9,indent=2))
        return HttpResponse(fd, content_type="application/json")
      else:   
         d9={'Expenseparticipants':c1,'Runningexpenses':c2}
         fd=(json.dumps(d9,indent=2))
         return HttpResponse(fd, content_type="application/json")

    else:
       if(len(t2)!=2):
     #d9 = {'Expenseparticipants':c1,'Runningexpenses':c2,'Expensedetails.':c3}
        d8 = json.loads(d7)
        c3=json.loads(json.dumps(d8[0]))
        d9 ={'Expenseparticipants':c1,'Runningexpenses':c2,'Expensedetails.':c3,'Updatelist':t4}
        fd=(json.dumps(d9,indent=2))
        return HttpResponse(fd, content_type="application/json")
       else:
           d8 = json.loads(d7)
           c3=json.loads(json.dumps(d8[0]))

           d9 ={'Expenseparticipants':c1,'Runningexpenses':c2,'Expensedetails.':c3}
           fd=(json.dumps(d9,indent=2))
           return HttpResponse(fd, content_type="application/json")

def API2(request,mob_number):
  v= str(mob_number)+':'
  t2 =Expensedetails.objects.filter(persons =v).order_by('-updated_at')     # - sign indicate that showing data  would be descending order of this particular field
  c=len(t2)
  print c  
 # t2=Expensedetails.objects.raw(' select * from Expensedetails where exists(select persons from Expensedetails where persons = %s',[v])
 # t2=Expensedetails.objects.raw('select * from Expensedetails where persons = %s',[v]+"order by updated_at desc")
 # print t2
  t2=serializers.serialize("json",t2)
  l=len(t2)
  print l
  d=json.loads(t2)
  exp_obj=d[0]['fields']['object']
  print "object" +" "+exp_obj
  data1=[]
  for i in d:
   
    data1.append(i['fields']['id1'])
  
  a=[x.encode("utf-8")for x in data1]   # remeber this statement in future to encoding to remove the u 
  print a
  k=len(a)
  print k
  c1=json.loads(json.dumps(d))
  for j in a:
  #  print j
 # c1=(json.dumps(d,indent=2))
 # return HttpResponse(fd, content_type="application/json")
    t3 =Updatelist.objects.filter(expenseid=j)
    print "j"+j
    t4=serializers.serialize("json",t3)


    print "array"+t4

    if(len(t4)==2):
    
     # continue
     d3={"expensedetails":c1}
     fd = (json.dumps(d3,indent=2))
    # t4=serializers.serialize("json",d3)
  #   return HttpResponse(fd,content_type="application/json")
    else:
#      t4=serializers.serialize("json",t3)
      d5 =json.loads(t4)
      c2=json.dumps(d5)
      d6={"expensedetails":c1,"updatelist":c2}
      fd=json.dumps(d6,indent=2)
   #   return HttpResponse(fd,content_type="application/json")
    if (exp_obj=="other"):
    #  exp_data =Expensedetails.objects.filter( object= d_obj)
     # exp_data=serializers.serialize("json",exp_data)
     # d = json.loads(exp_data)
     # c3= json.loads(json.dumps(d))

     # return HttpResponse(exp_data,content_type="application/json" )  
      mo_no= mob_number  
      print "mob_number" +mo_no
      exp_data =Expensedetails.objects.filter(owner = mo_no)
     # print exp_data
      exp_data=serializers.serialize("json",exp_data)
#      print exp_data

     # d = json.loads(exp_data)
     #  exp_id=d[0]["field"]["id1"]

      if(len(exp_data)==2):
     
       
      
         d5 =json.loads(t4)#############
         c2=json.dumps(d5)#############
 
         d7 = {"expensedetails1":c1,"updatelist":c2}#,"expensedetails2":c3}
         fd=json.dumps(d7,indent=2)

         return HttpResponse(fd,content_type="application/json")
      else:
       if(len(exp_data)!=2):
        
         d=json.loads(exp_data)
         exp_id=d[0]["fields"]["id1"]
         d5 =json.loads(t4)###############
         c2=json.loads(json.dumps(d5))##############
         c3= json.loads(json.dumps(d))
         d8=  {"expensedetails1":c1,"expensedetails2":c3,"updatelist":c2}
         updl_data =Updatelist.objects.filter(expenseid=exp_id)
         updl_data=serializers.serialize("json",updl_data)
         print "updl_data"+updl_data
         if(len(updl_data)==2):  
           fd=json.dumps(d8,indent=2)
           return HttpResponse(fd,content_type="application/json")
         else:
           if(len(exp_data)!=2):
             d = json.loads(updl_data)
             c4= json.loads(json.dumps(d))
             print "gggggggggggggggg"
             d8=  {"expensedetails1":c1,"expensedetails2":c3,"updatelist":c2,"Updatelist2":c4}
             fd=json.dumps(d8,indent=2)
             return HttpResponse(fd,content_type="application/json")

           
def FCMAPI(request,tokenid):
   token_id= str(tokenid)
   print "token_id =" +token_id
   new_obj = Fcm() # FCM is a table name
   new_obj.instance_token = token_id
   new_obj.save()
   d= Fcm.objects.values_list('instance_token', flat=True).order_by('p_id')
 
   print d
  # t=json.loads(d)
  # fd=json.dumps(t)

   return HttpResponse(d)
        
#def FCMDATA(request,message_title,message_body):
def FCMDATA(request,userNumber,orderID,merchantName,merchantNumber,userName,itemsList,netPrice,itemPrice,orderNo,status,available,amountItems,confreeStatus,ETA,category,date,merchantFcm):

  # d= Fcm.objects.values_list('instance_token', flat=True).order_by('p_id')
  # a= [x.encode('utf-8') for x in d]
  # d= {"to":a,"message":"hello contree"}
 #  fd=(json.dumps(d,indent=2))
  from pyfcm import FCMNotification

 # push_service = FCMNotification(api_key="AIzaSyD4KKKdU3Vs9-l5aInS_fArrs33zfpcRcQ")
#"AIzaSyAyr0ors7D1lVnhescbztbu7Z8F1pKqwEw"
# OR initialize with proxies

#proxy_dict = {
 #         "http"  : "http://fcm.googleapis.com/fcm/send",
  #        "https" : "http://fcm.googleapis.com/fcm/send",
   #     }
  push_service = FCMNotification(api_key="AIzaSyD4KKKdU3Vs9-l5aInS_fArrs33zfpcRcQ", proxy_dict="https://fcm.googleapis.com/fcm/send")

# Your api-ey can be gotten from:  https://console.firebase.google.com/project/<project-name>/settings/cloudmessaging
  registration_id = str(merchantFcm)
  #print registration_id 
 # registration_id = "eokhSdiw62A:APA91bG2TeLHBbWG7yqgqjJ9R9Tsq4REy454uKkcsPEWGjaUVJO0t-inEUR-dmm8gpzlPfzPY9OtWsJGLWs3Ypo3zSsS9GTH0GkoO2JjBwjVUY_ZBMQmSTWqoBlb9t-KIUDm6X1Fm5Qz"

  
  message_title = "Data Merchant Order" 
  #message_body =  "hrlo"
     
  d= { "userNumber":userNumber,
   "orderID":orderID,
   "merchantName":merchantName,
   "merchantNumber":merchantNumber,
   "userName":userName,
   "itemsList":itemsList,
   "netPrice":netPrice,
   "itemPrice":itemPrice,
   "orderNo":orderNo,
   "status":status,
   "available":available,
   "amountItems":amountItems,
   "confreeStatus":confreeStatus,
   "ETA":ETA,
   "category":category,
   "date" : date,  
   "fcm":registration_id }
 # print d

  result = push_service.notify_single_device(registration_id=registration_id, message_title=message_title, message_body=d )
  #print message_body
# Send to multiple devices by passing a list of ids
  #d= Fcm.objects.values_list('instance_token', flat=True).order_by('p_id')
 # print d
  #a=[x.encode("utf-8")for x in d]
  #print a
  #registration_ids = a
 # registration_ids = ["dF3sPsoN4WM:APA91bGDQ2mFcPbkYqKOl0OJdKhvCX3xndN7Ek-3ms2rRI_qfcqxdyIpZPYpIkLrCyE_cM_zqWPsb7vuXe_vVyHdFRqDlemYXoKZpZt0nux8qE4FXlXSvPoJNK-K3ZdyGk6dXQj5yAxP","fVKt48LuSBE:APA91bFh1rOCmjTrhz1NZUsdRVCrgay6YRTwj9u5qfMe0IiQO3ZDkzP50hJuNwC6BZZM1lTUJb1FtNNeiCiNAefRuJCQJpBxBXpNPt6dqYVkUyC9ONYWCpXon1J4MLx3ntGAQa2YYycp","eNvxhcQ4zRo:APA91bGwN9g4dpAOW0BvjDlnImiVjnI893JI9rG3J1CSFC8yC6Sm9NtOR5avCZt8VeZeh_L8F5kMpckVBnGzKEW8_PNdzGOv_FQI363lPWkuRGhwm2evGHVumjpJpXm4dfWpGAfEhSYv","cPJ0ZttEsmU:APA91bFQARBaCuF6aFskaTuk_ymz32V8Y-lvFAvUtlz4s2BMQJjZoKZItFPQ22yuVGI-9UgfMWnzGSGsmNlIvfjR_sTZZDx_5f3sLEAQ-VnpGi9UGZmKcFXHBYH5FFZ7mu1A-s-QBpch"]
#message_title = "Uber update"
#message_body = "Hope you're having fun this weekend, don't forget to check today's news"
  #result = push_service.notify_multiple_devices(registration_ids=registration_ids, message_title=message_title, message_body=message_body)
 
  print result
  t=json.dumps(result)
  if(result["success"]==1):
   return HttpResponse("your message has been sent successfully")
  else:
   #return HttpResponse("NOT sent message somthing went wrong") 
   return HttpResponse(json.dumps(d))
#@csrf_exempt
#def save_data(request,id):
 # print id
 # data={"name":"John", "age": "42"}
 # d= json.loads(data) 
 # print request.META
 # print request.method
  #print request.body

  #if request.method == 'POST':
 # json_data=json.loads(request.POST['body'])    
 # try:
#      data = request.POST.get['body']
  #   data= json_data['name']
   #  print request.body
     
 # except KeyError:
  #   HttpResponseServerError("Malformed data!")
 # return  HttpResponse("Got json data")

def FCMDATA1(request,message_title,message_body):
  from pyfcm import FCMNotification

  push_service = FCMNotification(api_key="AIzaSyD4KKKdU3Vs9-l5aInS_fArrs33zfpcRcQ", proxy_dict="https://fcm.googleapis.com/fcm/send")

  registration_id="eokhSdiw62A:APA91bG2TeLHBbWG7yqgqjJ9R9Tsq4REy454uKkcsPEWGjaUVJO0t-inEUR-dmm8gpzlPfzPY9OtWsJGLWs3Ypo3zSsS9GTH0GkoO2JjBwjVUY_ZBMQmSTWqoBlb9t-KIUDm6X1Fm5Qz"

  message_title = message_title 
  message_body = { "userNumber":"userNumber",
   "orderID":"orderID",
   "merchantName":"merchantName",
   "merchantNumber":"merchantNumber",
   "userName":"userName",
   "itemsList":"itemsList",
   "netPrice":"netPrice",
   "itemPrice":"itemPrice",
   "orderNo":"orderNo",
   "status":"status",
   "available":"available",
   "amountItems":"amountItems",
   "confreeStatus":"confreeStatus",
   "ETA":"ETA",
   "category":"category",
   "Date" :" date" }
 
  result = push_service.notify_single_device(registration_id=registration_id, message_title=message_title, message_body=message_body )
  print result
  t=json.dumps(result)
  if(result["success"]==1):
   return HttpResponse("your message has been sent successfully")
  else:
   #return HttpResponse("NOT sent message somthing went wrong")
   return HttpResponse(json.dumps(t))
#csrf_exempt
#@csrf_protect
#@cache_page(60 * 15)
#@csrf_protect
@csrf_exempt
def api_call(request):
 print "inside api call"
 print request.method
# name = request.POST.get("name",False)
 print 'Raw Data: "%s"' % request.body 
# name = dict.get["name","default"]
# print type(name)
# print name
# request.body

 #data = {}
# data ['jabir'] = "you have sent name "+ str(request.body)
 return HttpResponse("'json.dumps(data), content_type='application/json")
def fcmapi2(request,data,fcmid,order_id):
#def FCMDATA1(request,message_title,message_body):
  from pyfcm import FCMNotification

  push_service = FCMNotification(api_key="AIzaSyD4KKKdU3Vs9-l5aInS_fArrs33zfpcRcQ", proxy_dict="https://fcm.googleapis.com/fcm/send")

 # registration_id="eokhSdiw62A:APA91bG2TeLHBbWG7yqgqjJ9R9Tsq4REy454uKkcsPEWGjaUVJO0t-inEUR-dmm8gpzlPfzPY9OtWsJGLWs3Ypo3zSsS9GTH0GkoO2JjBwjVUY_ZBMQmSTWqoBlb9t-KIUDm6X1F$
  registration_id=fcmid
  message_title = "hi"
  d = {"message_body":data,"order_id":order_id}

  result = push_service.notify_single_device(registration_id=registration_id,message_title=message_title,message_body =d)
  print result
  t=json.dumps(result)
  if(result["success"]==1):
   return HttpResponse("your message has been sent successfully")
  else:
   #return HttpResponse("NOT sent message somthing went wrong")
   return HttpResponse(json.dumps(t))

def API3(request,object,id):

   d= Expenseparticipants.objects.raw('SELECT * FROM Expenseparticipants WHERE object = %s', [object])
   exp_data= serializers.serialize("json",d)
   print exp_data
   if(len(exp_data)!=2):
    # return HttpResponse("there are no matching data")
#    else:
     exp_data=json.loads(exp_data)
     c1=json.loads(json.dumps(exp_data))
     expd_data =Expensedetails.objects.filter(object = id)
     expd_data= serializers.serialize("json",expd_data)

     expd_data=json.loads(expd_data)
     c2=json.loads(json.dumps(expd_data))
     print c2
     if(len(expd_data)!=2):
      # return HttpResponse(c1)
     
      if len(exp_data)!=2 and len(expd_data)==2:
        return HttpResponse(c1)
    
      if len(exp_data)==2 and len(expd_data)!=2:
        return HttpResponse(c2)
      if len(exp_data) !=2and len(expd_data)!=2:
       d1={"Expenseparticipants.":c1,"Expensedetails.":c2}
       fd=json.dumps(d1,indent=2)
       return HttpResponse(fd,content_type="application/json")

def API4(request,id,object_id):
 print id
 id = 1
 d = Runningexpenses.objects.raw('SELECT * FROM Runningexpenses WHERE p_id = '+str(id)+' LIMIT 1')
 runexp_data= serializers.serialize("json",d)
 if len(runexp_data)==2:
  return HttpResponse("NULL")
 else:
    runexp_data=json.loads(runexp_data)
    c1=json.loads(json.dumps(runexp_data))
    d = Runningexpenses.objects.raw('SELECT * FROM Runningexpenses  WHERE p_id = 1 LIMIT 1')
    runexp1_data= serializers.serialize("json",d)
    if len(runexp1_data)==2:
     return HttpResponse("NULL")
    else:
       runexp1_data=json.loads(runexp1_data)
       c2=json.loads(json.dumps(runexp1_data))
       d1={"syncserver1.":c1,"syncserver2..":c2}
       fd=json.dumps(d1,indent=2)
       return HttpResponse(fd,content_type="application/json")
@csrf_exempt
def API5(request,user_no,user_no1):
 
# d = select * from Expensedetails  where ((persons LIKE %v%) and (owner LIKE %user_no1%))
# d = Expensedetails.objects.filter(persons__LIKE='%7009%')
 #d=  Expensedetails.objects.raw('SELECT * FROM Expensedetails WHERE CONTAINS ("persons",%s',[user_no])
# d = Expensedetails.objects.raw('SELECT * FROM Expensedetails WHERE persons LIKE %'+ q +'%')
 d=Expensedetails.objects.filter(Q(persons__contains=user_no)and Q(syncedString__contains=user_no1))
 exped_data = serializers.serialize("json",d)
 print "chek"+exped_data
 if len(exped_data)!=2:
  #return HttpResponse("NULL")
# else:
   exped_data=json.loads(exped_data)
   c1=json.loads(json.dumps(exped_data))
#   d1=Expensedetails.objects.filter(syncedString = user_no1)
 #  exped1_data= serializers.serialize("json",d1)
  # c2=json.loads(json.dumps(exped1_data))
   d1={"Expense_detail":c1}
   fd=json.dumps(d1,indent=2)
   return HttpResponse(fd,content_type="application/json")
 else:
      return HttpResponse("parameter doe not exits  in expansedetails table")

def API6(request,id,expense_version,object):
  print id,expense_version,object

  d1 = Expensedetails.objects.filter(id1=id,expenseVersion = expense_version,object__contains = object)
  print d1
  exped_data= serializers.serialize("json",d1)
  length1 = len(exped_data)
  print length1
  exped_data=json.loads(exped_data)
  c1=json.loads(json.dumps(exped_data))
  d2={"syncstatus":c1}
  fd=json.dumps(d2,indent=2)


  return HttpResponse(fd,content_type="application/json")

def API7(requerst,id,expense_version,object,syncedstring):  #update query
 print id,expense_version,object,syncedstring 
 expense_dada= Expensedetails.objects.filter(id1=id,expenseVersion=expense_version,object__contains=object ).update(syncedString=syncedstring)
 if(expense_dada!=0):
  return HttpResponse("updated succefully")
 else:
    return HttpResponse("Does not exists modifiable parameter")


def API8(request,murchant_number):
 marchant_data=Merchantofferings.objects.filter(merchantnumber=murchant_number)
 murchant_data= serializers.serialize("json",marchant_data)
 murchant_data=json.loads(murchant_data)
 c1=json.loads(json.dumps(murchant_data))
 d2={"merchant_data":c1}
 fd=json.dumps(d2,indent=2)


 return HttpResponse(fd,content_type="application/json")
def API9(request,user_name):
 referal_data=Referral.objects.filter(username=user_name)
 referal_data= serializers.serialize("json",referal_data)
 referal_data=json.loads(referal_data)
 c1=json.loads(json.dumps(referal_data))
 d2={"referral_data":c1}
 fd=json.dumps(d2,indent=4)


 return HttpResponse(fd,content_type="application/json")
def API10(request,user_name,referalcount,treferalcount):
 referal_data=Referral.objects.filter(username=user_name).update(referralcount=referalcount,totalreferalcount=treferalcount)
 if(referal_data !=0):
  return HttpResponse("updated succefully")
 else:
    return HttpResponse("Does not exists modifiable parameter")
def API11(request,user_number,order_id):
 userorder_data=Userorder.objects.filter(usernumber=user_number,orderid__contains=order_id)
 userorder_data= serializers.serialize("json",userorder_data)
 userorder_data=json.loads(userorder_data)
# print userorder_data
 status=dpath.util.get(userorder_data, '/0/fields/status')
 print "check" +" "+ str(status)
 c1=json.loads(json.dumps(userorder_data))
 print c1
 d2={"userorder_data":c1}
 fd=json.dumps(d2,indent=4)
 if(status!=0):
  return HttpResponse(fd,content_type="application/json")
 else:
  return HttpResponse("status = 0,to get data,there should be status != 0")


@csrf_exempt
def waletApi(request):          #(Wallet API)
 
 print "inside api call"
 print request.method
 data= request.body
 data = json.loads(data)
 print data
 
 requiredFunction= data['requiredFunction']
 domainType= data['domainType']
 username1= data['userName']
 incomingjson=data['incommingJson']
 jsondata=json.dumps(incomingjson)
 jsondatabytes=jsondata.encode('utf-8')
 print username1
 userorder_data=Userorder.objects.filter(username='4994215870')
 userorder_data= serializers.serialize("json",userorder_data)
 userorder_data=json.loads(userorder_data)
 print userorder_data
# consumer_id=dpath.util.get(userorder_data, '/0/fields/status')
# print "check" +" "+ str(status)
 consumer_id = "1109851"
 MERCHANT_USERNAME="0299af1022b234007dd3e93738d4939d"
 MERCHANT_PASSWORD="ef39f0a342da57b6b30f00ce427c01fc"

 #requiredFunction=dpath.util.get(data, '/requiredFunction')
 #domainType = dpath.util.get(data, '/domainType')
 #print requiredFunction
 #print domainType
 
 if(domainType=="sandBox"):
  domain="http://180.179.146.81"
 else:
  domain="https://shmart.in"
# if(requiredFunction=="getBalance"):
 # auth = Base64.encode((MERCHANT_USERNAME + ":" + MERCHANT_PASSWORD.trim()).getBytes(), Base64.URL_SAFE | Base64.NO_WRAP)
 # url=domain+"/wallet/v1/balances/general/consumer_id/"+consumer_id  
  headers = {'content-type':'application/json','Accept':'application/json'}
 # res=requests.get('https://shmart.in/wallet/v1/balances/general/consumer_id/2194327', auth=(MERCHANT_USERNAME,MERCHANT_PASSWORD),headers=headers)
 
  if(requiredFunction=="getBalance"):
   res=requests.get(domain +'/wallet/v1/balances/general/consumer_id/2194327', auth=(MERCHANT_USERNAME,MERCHANT_PASSWORD),headers=headers)
   print "response"+str(res.text)
   fd=json.loads(json.dumps(res.text,indent=4))
   print  fd
   return HttpResponse(fd)
  
  elif(requiredFunction=="checkUserActivated"):
   res=requests.get(domain +'/wallet/v1/customers/activation_status/consumer_id/2194327', auth=(MERCHANT_USERNAME,MERCHANT_PASSWORD),headers=headers)
   print "response"+str(res.text)
   fd=json.loads(json.dumps(res.text,indent=4))
   print  fd
   return HttpResponse(fd)

  elif(requiredFunction=="getTransactionHistory"):
   res=requests.get(domain +'/wallet/v1/transactions/list/consumer_id/2194327', auth=(MERCHANT_USERNAME,MERCHANT_PASSWORD),headers=headers)
   print "response"+str(res.text)
   fd=json.loads(json.dumps(res.text,indent=4))
   print  fd
   return HttpResponse(fd)
  
  elif(requiredFunction=="getBeneficiaryList"):
   res=requests.get(domain +'/wallet/v1/customers/list_beneficiary/consumer_id/2194327', auth=(MERCHANT_USERNAME,MERCHANT_PASSWORD),headers=headers)
   print "response"+str(res.text)
   fd=json.loads(json.dumps(res.text,indent=4))
   print  fd
   return HttpResponse(fd)
 
  elif(requiredFunction=="getBalanceLimits"):
   res=requests.post(domain +'/wallet/v1/balances/availableLimit',auth=(MERCHANT_USERNAME,MERCHANT_PASSWORD),headers=headers,data=json.dumps(incomingjson))
   print "response"+str(res.text)
   fd=json.loads(json.dumps(res.text,indent=4))
   print  fd
   return HttpResponse(fd)

  elif(requiredFunction=="createWalletAccount"):
   res=requests.post(domain +'/wallet/v1/customers/create',auth=(MERCHANT_USERNAME,MERCHANT_PASSWORD),headers=headers,data=json.dumps(incomingjson))
   print "response"+str(res.text)
   fd=json.loads(json.dumps(res.text,indent=4))
   print  fd
   return HttpResponse(fd)

  elif(requiredFunction=="generateOTP"):
   res=requests.post(domain +'//wallet/v1/customers/generateotp',auth=(MERCHANT_USERNAME,MERCHANT_PASSWORD),headers=headers,data=json.dumps(incomingjson))
   print "response"+str(res.text)
   fd=json.loads(json.dumps(res.text,indent=4))
   print  fd
   return HttpResponse(fd)

  elif(requiredFunction=="activateWalletAccount"):
   res=requests.post(domain +'//wallet/v1/customers/activate',auth=(MERCHANT_USERNAME,MERCHANT_PASSWORD),headers=headers,data=json.dumps(incomingjson))
   print "response"+str(res.text)
   fd=json.loads(json.dumps(res.text,indent=4))
   print  fd
   return HttpResponse(fd)

  elif(requiredFunction=="doBankTransfer"):
   res=requests.post(domain +'/wallet/v1/transfers/withdraw',auth=(MERCHANT_USERNAME,MERCHANT_PASSWORD),headers=headers,data=json.dumps(incomingjson))
   print "response"+str(res.text)
   fd=json.loads(json.dumps(res.text,indent=4))
   print  fd
   return HttpResponse(fd)

  elif(requiredFunction=="doWalletToWalletTransfer"):
   res=requests.post(domain +'/wallet/v1/wallet_transfers/',auth=(MERCHANT_USERNAME,MERCHANT_PASSWORD),headers=headers,data=json.dumps(incomingjson))
   print "response"+str(res.text)
   fd=json.loads(json.dumps(res.text,indent=4))
   print  fd
   return HttpResponse(fd)

  elif(requiredFunction=="doMerchantPayment"):
   res=requests.post(domain +'/wallet/v1/debits/general',auth=(MERCHANT_USERNAME,MERCHANT_PASSWORD),headers=headers,data=json.dumps(incomingjson))
   print "response"+str(res.text)
   fd=json.loads(json.dumps(res.text,indent=4))
   print  fd
   return HttpResponse(fd)

  elif(requiredFunction=="creditUserWallet"):
   res=requests.post(domain +'/wallet/v1/credits/general',auth=(MERCHANT_USERNAME,MERCHANT_PASSWORD),headers=headers,data=json.dumps(incomingjson))
   print "response"+str(res.text)
   fd=json.loads(json.dumps(res.text,indent=4))
   print  fd
   return HttpResponse(fd)

  elif(requiredFunction=="addBeneficiary"):
   res=requests.post(domain +'/wallet/v1/transfers/create',auth=(MERCHANT_USERNAME,MERCHANT_PASSWORD),headers=headers,data=json.dumps(incomingjson))
   print "response"+str(res.text)
   fd=json.loads(json.dumps(res.text,indent=4))
   print  fd
   return HttpResponse(fd)
 
  elif(requiredFunction=="addFundThroughiFrame"):
   res=requests.post(domain +'/wallet/v1/funds/create_iframe',auth=(MERCHANT_USERNAME,MERCHANT_PASSWORD),headers=headers,data=json.dumps(incomingjson))
   print "response"+str(res.text)
   fd=json.loads(json.dumps(res.text,indent=4))
   print  fd
   return HttpResponse(fd)

  elif(requiredFunction=="deleteBeneficiary"):
   res=requests.post(domain +'/wallet/v1/transfers/deletebeneficiary',auth=(MERCHANT_USERNAME,MERCHANT_PASSWORD),headers=headers,data=json.dumps(incomingjson))
   print "response"+str(res.text)
   fd=json.loads(json.dumps(res.text,indent=4))
   print  fd
   return HttpResponse(fd)
@csrf_exempt

def expenseAddAPI(request):         
 print "inside api call"
 print request.method
 data= request.body
 data = json.loads(data)
 print data
 new_obj = Expensedetails() # expensedetails is a table name
 new_obj.description = data["description"]
 new_obj.sharesValues = data["sharesValues"]
 new_obj.persons = data["persons"]
 new_obj.deleted = data["deleted"]
 new_obj.object = data["object"]
 new_obj.addedby = data["addedby"]
 new_obj.id1 = data["id1"]
 new_obj.owner = data["owner"]
 new_obj.expenseVersion = data["expenseVersion"]
 new_obj.shares = data["shares"]
 new_obj.personsNames = data["personsNames"]
 new_obj.date = data["date"]
 new_obj.distribution = data["distribution"]
 new_obj.syncedString = data["syncedString"]
 new_obj.save()
 id1=data["id1"]
 expenseVersion=data["expenseVersion"]
 object=data["object"]
 d1 = Expensedetails.objects.filter(id1=id1,expenseVersion = expenseVersion,object__contains = object)
 print d1
 exped_data= serializers.serialize("json",d1)
 print exped_data
 length1 = len(exped_data)
 if(length1==2):
  return HttpResponse("error")
 if(length1!=2):
  c1={"status":"sucess","data":"inserted row successfully"}
  fd=(json.dumps(c1))
  
  return HttpResponse(fd,content_type="application/json")

@csrf_exempt
def expenseUpdateAPI(request):          
 print "inside api call"
 print request.method
 data= request.body
 data = json.loads(data)
# print data
 new_data=data["newJSON"]
 old_data=data["oldJSON"]
 print  new_data
 print old_data

 new_obj = Expensedetails() # expensedetails is a table name
 new_obj.description = old_data["description"]
 new_obj.sharesValues = old_data["sharesValues"]
 new_obj.persons = old_data["persons"]
 new_obj.deleted = old_data["deleted"]
 new_obj.object = old_data["object"]
 new_obj.addedby = old_data["addedby"]
 new_obj.id1 = old_data["id1"]
 new_obj.owner = old_data["owner"]
 new_obj.expenseVersion = old_data["expenseVersion"]
 new_obj.shares = old_data["shares"]
 new_obj.personsNames = old_data["personsNames"]
 new_obj.date = old_data["date"]
 new_obj.distribution = old_data["distribution"]
 new_obj.syncedString = old_data["syncedString"]
 new_obj.amount = old_data["amount"]

 new_obj.save()
 id1=old_data["id1"]
 expenseVersion1="latest"
 object=old_data["object"]
 description = new_data["description"]
 sharesValues = new_data["sharesValues"]
 persons = new_data["persons"]
 deleted = new_data["deleted"]
 object = new_data["object"]
 addedby = new_data["addedby"]
 id1 = new_data["id1"]
 owner = new_data["owner"]
 expenseVersion = new_data["expenseVersion"]
 shares = new_data["shares"]
 personsNames = new_data["personsNames"]
 date = new_data["date"]
 distribution = new_data["distribution"]
 syncedString = new_data["syncedString"]
 amount = new_data["amount"]
 print description 
 print object
 

 d1 = Expensedetails.objects.filter(id1=id1,expenseVersion = expenseVersion,object__contains = object).update(description =description ,sharesValues=sharesValues ,persons =persons ,deleted=amount  ,object =object ,addedby =addedby ,id1 =id1 , owner = owner , expenseVersion = expenseVersion ,shares =shares,personsNames=personsNames,date =date ,distribution =distribution ,syncedString =syncedString ,amount =amount )
# print d1
 #d1 = Expensedetails.objects.filter(id1=id1,expenseVersion=expenseVersion,object__contains=object).update(expenseVersion = "hello") 
# exped_data= serializers.serialize("json",d1)
 print d1
 d1 = Expensedetails.objects.filter(id1=id1,expenseVersion = expenseVersion,object__contains = object)
 exped_data= serializers.serialize("json",d1)
 print exped_data
 length1=len(exped_data)
 #if(description = exped_data["description"]and sharesValues = exped_data["sharesValues"]and persons = exped_data["persons"]and deleted = exped_data["deleted"]and object = exped_data["object"]and addedby = exped_data["addedby"]and id1 = exped_data["id1"]and owner = exped_data["owner"]and expenseVersion = exped_data["expenseVersion"]and shares = exped_data["shares"]and personsNames = exped_data["personsNames"]and date = exped_data["date"]and distribution = exped_data["distribution"]and  syncedString = exped_data["syncedString"]and amount = exped_data["amount"]):
 if(length1==2):
  return HttpResponse("error")
 if(length1!=2):
  c1={"status":"sucess","data":"inserted row successfully"}
  fd=(json.dumps(c1))

  return HttpResponse(fd,content_type="application/json") 
  #,expenseVersion = expenseVersion1,object__contains = object1
  
@csrf_exempt
 
def groupAddAPI(request):
 print "inside api call"
 print request.method
 data= request.body
 data = json.loads(data)
 print data
 new_obj = Expensedetails() # expensedetails is a table name
 new_obj.description = data["description"]
 new_obj.sharesValues = data["sharesValues"]
 new_obj.persons = data["persons"]
 new_obj.deleted = data["deleted"]
 new_obj.object = data["object"]
 new_obj.addedby = data["addedby"]
 new_obj.id1 = data["id1"]
 new_obj.owner = data["owner"]
 new_obj.expenseVersion = data["expenseVersion"]
 new_obj.shares = data["shares"]
 new_obj.personsNames = data["personsNames"]
 new_obj.date = data["date"]
 new_obj.distribution = data["distribution"]
 new_obj.syncedString = data["syncedString"]
 new_obj.save()
 id1=data["id1"]
 expenseVersion=data["expenseVersion"]
 object=data["object"]
 d1 = Expensedetails.objects.filter(id1=id1,expenseVersion = expenseVersion,object__contains = object)
 print d1
 exped_data= serializers.serialize("json",d1)
 print exped_data
 length1 = len(exped_data)
 if(length1==2):
  return HttpResponse("error")
 if(length1!=2):
  c1={"status":"sucess","data":"inserted row successfully"}
  fd=(json.dumps(c1))

  return HttpResponse(fd,content_type="application/json")
 

@csrf_exempt
def groupUpdateAPI(request):
 print "inside api call"
 print request.method
 data= request.body
 data = json.loads(data)
# print data
 new_data=data["newJSON"]
 old_data=data["oldJSON"]
 print  new_data
 print old_data

 new_obj = Expensedetails() # expensedetails is a table name
 new_obj.description = old_data["description"]
 new_obj.sharesValues = old_data["sharesValues"]
 new_obj.persons = old_data["persons"]
 new_obj.deleted = old_data["deleted"]
 new_obj.object = old_data["object"]
 new_obj.addedby = old_data["addedby"]
 new_obj.id1 = old_data["id1"]
 new_obj.owner = old_data["owner"]
 new_obj.expenseVersion = old_data["expenseVersion"]
 new_obj.shares = old_data["shares"]
 new_obj.personsNames = old_data["personsNames"]
 new_obj.date = old_data["date"]
 new_obj.distribution = old_data["distribution"]
 new_obj.syncedString = old_data["syncedString"]
 new_obj.amount = old_data["amount"]

 new_obj.save()
 id1=old_data["id1"]
 expenseVersion1="latest"
 object=old_data["object"]
 description = new_data["description"]
 sharesValues = new_data["sharesValues"]
 persons = new_data["persons"]
 deleted = new_data["deleted"]
 object = new_data["object"]
 addedby = new_data["addedby"]
 id1 = new_data["id1"]
 owner = new_data["owner"]
 expenseVersion = new_data["expenseVersion"]
 shares = new_data["shares"]
 personsNames = new_data["personsNames"]
 date = new_data["date"]
 distribution = new_data["distribution"]
 syncedString = new_data["syncedString"]
 amount = new_data["amount"]
 print description
 print object


 d1 = Expensedetails.objects.filter(id1=id1,expenseVersion = expenseVersion,object__contains = object).update(description =description ,sharesValues=sharesValues ,persons =persons ,deleted=deleted  ,object =object ,addedby =addedby ,id1 =id1 , owner = owner , expenseVersion = expenseVersion ,shares =shares,personsNames=personsNames,date =date ,distribution =distribution ,syncedString =syncedString ,amount =amount )

# print d1
 #d1 = Expensedetails.objects.filter(id1=id1,expenseVersion=expenseVersion,object__contains=object).update(expenseVersion = "hello")
# exped_data= serializers.serialize("json",d1)
 print d1
 d1 = Expensedetails.objects.filter(id1=id1,expenseVersion = expenseVersion,object__contains = object)
 exped_data= serializers.serialize("json",d1)
 print exped_data
 length1=len(exped_data)
 #if(description = exped_data["description"]and sharesValues = exped_data["sharesValues"]and persons = exped_data["persons"]and deleted = exped_data["deleted"]and obje$
 if(length1==2):
  return HttpResponse("error")
 if(length1!=2):
  c1={"status":"sucess","data":"updated row successfully"}
  fd=(json.dumps(c1))

  return HttpResponse(fd,content_type="application/json")
@csrf_exempt
def expenseDeleteAPI(request):
 print "inside api call"
 print request.method
 data= request.body
 data = json.loads(data)
 print data

 id1=data["id1"]
 print id1
 expenseVersion1="latest"
 object=data["object"]
 description = data["description"]
 sharesValues = data["sharesValues"]
 persons = data["persons"]
 deleted = data["deleted"]
 object = data["object"]
 addedby = data["addedby"]
 id1 = data["id1"]
 owner = data["owner"]
 expenseVersion = data["expenseVersion"]
 shares = data["shares"]
 personsNames = data["personsNames"]
 date = data["date"]
 distribution = data["distribution"]
 syncedString = data["syncedString"]
 amount = data["amount"]
 d1 = Expensedetails.objects.filter(id1=id1,expenseVersion = expenseVersion,object__contains = object).update(description =description ,sharesValues=sharesValues ,persons =persons ,deleted=deleted  ,object =object ,addedby =addedby ,id1 =id1 , owner = owner , expenseVersion = expenseVersion ,shares =shares,personsNames=personsNames,date =date ,distribution =distribution ,syncedString =syncedString ,amount =amount )

 d2 = Expensedetails.objects.filter(id1=id1,expenseVersion = expenseVersion,object__contains = object)
 data= serializers.serialize("json",d2)
 #print "first2"+data
 data = json.loads(data)

 print data
 
 deleted1=data[0]["fields"]["deleted"]
 print deleted1
 if(deleted==deleted1):
  
    c1={"status":"sucess","data":"expensedeleted  successfully"}
    fd=(json.dumps(c1))
    return HttpResponse(fd,content_type="application/json")

 else:
    return HttpResponse("error")

 
@csrf_exempt
def groupDeleteAPI(request):
 print "inside api call"
 print request.method
 data= request.body
 data = json.loads(data)
 print data
 group=data["group"]
 print group
 id1=group["id1"]
 print id1
 expenseVersion=group["expenseVersion"]
 print expenseVersion
 object = group["object"].split("##")[0]

 print object

 userNumber=data["userNumber"]
 
 d2 = Expensedetails.objects.filter(id1=id1,expenseVersion = expenseVersion,object__contains = object)
 
 data= serializers.serialize("json",d2)
 data = json.loads(data)
 persons=data[0]["fields"]["persons"]
 groupDeletedBy=data[0]["fields"]["groupDeletedBy"]
 print groupDeletedBy

 #personsNames=data[0]["fields"]["personsNames"]

 if(userNumber+":" in persons):
  persons.replace(userNumber+":","")
 d2 = Expensedetails.objects.filter(id1=id1,expenseVersion = expenseVersion,object__contains = object).update(persons=persons,groupDeletedBy=userNumber+":")
 d2 = Expensedetails.objects.filter(id1=id1,expenseVersion = expenseVersion,object__contains = object)
 
 data= serializers.serialize("json",d2)
 data = json.loads(data)
 groupDeletedBy1=data[0]["fields"]["groupDeletedBy"]

 if(groupDeletedBy==groupDeletedBy1):

    c1={"status":"sucess","data":"groupDeleted  successfully"}
    fd=(json.dumps(c1))
    return HttpResponse(fd,content_type="application/json")

 else:
    return HttpResponse("error")



  #personsNames.replace(userNumber+":","")

 print data


 
        
 
 
