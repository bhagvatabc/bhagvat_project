from django.shortcuts import render
from django.shortcuts import get_object_or_404, render
from django.views.decorators.cache import cache_page
from django.views.decorators.csrf import csrf_protect
from django.http import StreamingHttpResponse
from django.core.context_processors import csrf
from django.http import HttpResponseRedirect
from django import forms
from django.contrib.auth.forms import UserCreationForm
from django.views.decorators.csrf import csrf_exempt, csrf_protect
# Create your views here.
from django.core import serializers
from django.http import HttpResponse
from django.shortcuts import render
from django.shortcuts import render_to_response
from myapp.models import *
import myapp.views
from myapp.views import *
import json
from django.db.models import F
import simplejson
import json as simplejson
import os
import sys
from urllib2 import urlopen, HTTPError
import urllib
from urllib2 import Request, urlopen, URLError
import requests
from requests import *
from django.http import HttpResponse, HttpRequest, HttpResponseRedirect
from django.http import JsonResponse
from django.db.models import Q
import operator
import dpath.util
import random
#import pyodbc
import csv
import string
from pyfcm import FCMNotification

@csrf_exempt
def sync(request):
 return syncExpenses(json.loads(request.body)["syncList"])

def syncExpenses(syncList):
 for entry in syncList:
  p = Expensedetails.objects.update_or_create(defaults = entry,id1 = entry["id1"], object__contains = entry["object"].split("##")[0], expenseVersion = entry["expenseVersion"])
  print p[1]
  print json.loads(p[0])
 return HttpResponse("ok")

def connectFCM(title,body,idsList):
 push_service = FCMNotification(api_key="AIzaSyAyr0ors7D1lVnhescbztbu7Z8F1pKqwEw", proxy_dict="https://fcm.googleapis.com/fcm/send")
 result = push_service.notify_multiple_devices(registration_ids=idsList, message_title=title, message_body=body)
 print result
 return result

def sendRemindMessage(name,number,amount):
 message = "Your friend " + name + " asked you to pay Rs " + amount + " on Contree. Download from https://goo.gl/sX2Be5 #ShareExpenses"
 return connectMessage(number,message)

def sendOTPMessage(otp,number):
 message =  otp + " is One Time Password (OTP) for your Contree login verification. Please do not share it with anyone. WelcomeBack"
 return connectMessage(number,message)

def connectMessage(number,message):
 url = ("http://alerts.solutionsinfini.com/api/v3/index.php?method=sms&api_key=A2da30c3f0e3f933485c8a7545dcaf895&to="+number+"&sender=Contri&message="+message)
 return json.loads(requests.get(url).text)["status"]
 
@csrf_exempt
def deleteUser(request):
  number = json.loads(request.body)["number"]
  querySet = User.objects.filter(number = number)
  print querySet
  if (querySet.count() == 0):
   c1={"status":"error","message":"User does not exist"}
  else:
   querySet.delete()
   c1={"status":"success","message":"User deleted"}
  return HttpResponse(json.dumps(c1),content_type="application/json")

@csrf_exempt
def deleteExpense(request):
  data = json.loads(request.body)
  print "13"
  id1 = data["id1"]
  object = data["object"].split("##")[0]
  expenseVersion = data["expenseVersion"]
  querySet = Expensedetails.objects.filter(id1 = id1, object__contains = object, expenseVersion = expenseVersion)
  if (querySet.count() == 0):
   c1={"status":"error","message":"Expense does not exist2"}
  else:
   querySet.delete()
   c1={"status":"success","message":"Expense deleted"}
  return HttpResponse(json.dumps(c1),content_type="application/json")

@csrf_exempt
def DeleteExpenseAllVersions(request):
  data = json.loads(request.body)
  id1 = data["id1"]
  object = data["object"].split("##")[0]
  querySet = Expensedetails.objects.filter(id1 =id1 , object__contains = object )
  if (querySet.count() == 0):
   c1={"status":"error","message":"Expense does not exist1"}
  else:
   querySet.delete()
   c1={"status":"success","message":"Expense deleted"}
  return HttpResponse(json.dumps(c1),content_type="application/json")

@csrf_exempt
def remindAPI(request):
 comingJson = json.loads(request.body)
 memberList = comingJson["memberList"]
 whoReminded = comingJson["userName"]
 numberList =[]
 for member in memberList:
  numberList.append(member["number"])
 
 idQuery = reduce(operator.or_,(Q(number = number)for number in numberList))
 users =  User.objects.filter(idQuery)
 users = json.loads(serializers.serialize("json",users)) 
 userList = []
 savedNumberList = []
 for user in users:
  user2 = (user)["fields"]
  userList.append(user2)
  savedNumberList.append(user2["number"])
 
 counter = 0
 for member in memberList:
   requestNumber = member["number"]
   amount = member["amount"]
   if (requestNumber not in savedNumberList):
    result =  sendRemindMessage(whoReminded,requestNumber,amount)
    if (result == "OK"):
     counter = counter + 1 
   else:
    for user in userList:
     if (user["number"] == requestNumber): 
      tokenValue = user["fcmToken"]
    fcmList = []
    fcmList.append(tokenValue)
    fcmList =[x.encode("utf-8")for x in fcmList]
    message = " asked you to pay Rs " + amount
    body = {"body":message}
    result = connectFCM(whoReminded, body, fcmList)
    if (result["success"] == 1):
     counter = counter + 1
 
 if (counter == 0):
  c1={"status":"error","message":"Could not send reminders. Try later"}
 else:
  c1={"status":"success","message":"Reminders sent successfully","count":counter}
 return HttpResponse(json.dumps(c1),content_type="application/json")

def sendFCMorMessage(numberList,fcmTitle,fcmBody,messageBody):
 idQuery = reduce(operator.or_,(Q(number = number)for number in numberList))
 users =  User.objects.filter(idQuery)
 users = json.loads(serializers.serialize("json",users))
 userList = []
 savedNumberList = []
 for user in users:
  user2 = (user)["fields"]
  userList.append(user2)
  savedNumberList.append(user2["number"])
 counter = 0
 fcmList = []
 for number in numberList:
   if (number not in savedNumberList):
    connectMessage(number,messageBody)
   else:
    for user in userList:
     if(user["number"] == number):
      fcmList.append(user["fcmToken"])
 fcmList =[x.encode("utf-8")for x in fcmList]
 connectFCM(fcmTitle, fcmBody, fcmList)

@csrf_exempt
def verifyReferralAPI(request):
 print "inside api call"
 print request.method
 data= request.body
 data = json.loads(data)
 referralInput=data["referralInput"]
 mobile_number = data["userNumber"]
 print data
 count  = User.objects.filter(referralCode = referralInput).count()
 if (count > 0):
   user = User.objects.filter(referralCode = referralInput)
   userJson = serializers.serialize("json",user)
   userJson = json.loads(userJson)[0]["fields"]
   referredFromName = userJson["name"]
   referredFromNumber = userJson["number"]
   referralCount = int(userJson["referralCount"])
   referralCount = referralCount + 1
   User.objects.filter(referralCode = referralInput).update(referralCount = referralCount)
   
   referredFromString = referredFromName + ":" + referredFromNumber
   User.objects.filter(number = mobile_number).update(referredFrom = referredFromString) 
   cuser = User.objects.filter(number = mobile_number)
   cuserJson = serializers.serialize("json",cuser)
   cuserJson = json.loads(cuserJson)[0]["fields"]  
   c1={"status":"success","message":"Referral successful","user":cuserJson}
 else: 
   c1={"status":"error","message":"Invalid referral"}
 return HttpResponse(json.dumps(c1),content_type="application/json")

@csrf_exempt
def updateUserAPI(request):
 data = json.loads(request.body)
 number = data["number"]
 name = data["name"]
 email = data["email"]
 consumerID = data["consumerID"]
 level = data["level"]
 referredFrom = data["referredFrom"]
 regId = data["regId"]
 fcmToken = data["fcmToken"]
 versionName = data["versionName"]
 androidVersion = data["androidVersion"]
 brandName = data["brandName"]
 modelName = data["modelName"]
 loginVersionName = data["loginVersionName"]
 userType = data["userType"]
 referralCode = data["referralCode"]
 referralCount = data["referralCount"]
 
 count = User.objects.filter(number = number).count()
 if (count != 0):
    User.objects.filter(number = number).update(number = number, name = name, email = email, consumerID = consumerID, level = level, referredFrom = referredFrom, regId = regId, fcmToken = fcmToken, versionName = versionName, androidVersion = androidVersion, brandName = brandName, modelName = modelName, loginVersionName = loginVersionName, userType = userType, referralCode = referralCode, referralCount = referralCount)
    updatedUser = User.objects.filter(number = number)
    UserJson = serializers.serialize("json",updatedUser)
    UserJson = json.loads(UserJson)[0]["fields"]
    c1={"status":"success","message":"User updated successfully","user":UserJson}
 else:
    c1={"status":"error","message":"User does not exist"}
 return HttpResponse(json.dumps(c1),content_type="application/json")
 
@csrf_exempt
def sendOTPMessageAPI(request):
 data = json.loads(request.body)
 print data
 mobile_number=data["mobileNumber"]
 otpRow = {
 d2 = Otp.objects.get_or_create(mobilenumber = mobile_number)
 if(d2.count() == 0):
  new_obj = Otp()
  new_obj.pk=mobile_number
  otpnumber=random.randint(100000,999999)
  new_obj.otp=otpnumber
  new_obj.p_id=1
  new_obj.save()
  d2 = Otp.objects.filter(mobilenumber = mobile_number)
 data = json.loads(serializers.serialize("json",d2))
 otp=data[0]["fields"]["otp"]
 if(sendOTPMessage(otp,mobile_number) == "OK"):
  c1={"status":"success","message":"otp message sent successfully"}
 else:
  c1={"status":"error","message":"message not sent"}
 return HttpResponse(json.dumps(c1),content_type="application/json")

@csrf_exempt
def verifyOTPMessageAPI(request):
 print "inside api call"
 print request.method
 data= request.body
 data = json.loads(data)
 print data
 mobile_number=data["userNumber"]
 otpinput=data["otpInput"]
 print otpinput
 userType=data["userType"]
 fcmToken = data["fcmToken"]
 print mobile_number
 otpfetch = Otp.objects.filter(mobilenumber = mobile_number)
 data= serializers.serialize("json",otpfetch)
 data = json.loads(data)
 otp=data[0]["fields"]["otp"]
 print otp
 if(otpinput==otp):
  userQuery = User.objects.filter(number = mobile_number)

  if(userQuery.count() == 0):
   isUserNew="yes"
   new_User = User()
   new_User.number=mobile_number
   new_User.userType=userType
   new_User.referralCode = ''.join(random.choice(string.ascii_uppercase + string.digits) for _ in range(6))
   new_User.consumerID = "no_id"
   new_User.level = "0"
   new_User.referralCount = "1"
   new_User.fcmToken = fcmToken
   new_User.save()
  else:
   isUserNew = "no"
   level = json.loads(serializers.serialize("json",userQuery))[0]["fields"]["level"]
   level = int(level)+1
   userQuery.update(fcmToken = fcmToken, level = str(level))

  d2 = User.objects.filter(number = mobile_number)
  finalUserJSON = json.loads(serializers.serialize("json",d2))[0]["fields"]
  
  if (isUserNew == "no" and finalUserJSON["consumerID"] != "no_id"):
    consumerID = finalUserJSON["consumerID"]
    result = getWalletResponse('https://shmart.in/wallet/v1/customers/activation_status/consumer_id/'+consumerID,"get","noJson" )
    print result
    result = json.loads(result)
    status = result['status']
    if (status == "success"):
     consumerID = finalUserJSON["consumerID"]
    else:
     consumerID = "no_id"
     User.objects.filter(number = mobile_number).update(consumerID = consumerID)
     user = User.objects.filter(number = mobile_number)
     finalUserJSON = json.loads(serializers.serialize("json",user))[0]["fields"]
  
  expenses = Expensedetails.objects.filter(persons__contains = mobile_number)
  expenseData = serializers.serialize("json",expenses)
  expenseData = json.loads(expenseData)
  fetchedItems = []
  for expense in expenseData:
    fetchedItems.append(expense["fields"])
  
  groupIDsSet = set()
  for group in expenseData:
    groupID = group["fields"]["object"].split("##")[0]
    groupIDsSet.add(groupID)
  
  groupIDsSet.add("|other|")
  groupIDsSet.remove("|other|")
  print groupIDsSet
  
  finalExpenses = []
  idQuery = reduce(operator.or_,(Q(object__contains = groupID)for groupID in groupIDsSet ))
  groups =  Expensedetails.objects.filter(idQuery, id1 = "Group Creation", expenseVersion = "latest").exclude(groupDeletedBy__contains = mobile_number)
  groupsData = serializers.serialize("json",groups)
  groupsData = json.loads(groupsData)
  for group in groupsData:
     groupID = group["fields"]["object"].split("##")[0]
     if (mobile_number in group["fields"]["persons"]):
       finalExpenses.append(group["fields"])

     for expense in fetchedItems:
       if (groupID in expense["object"]):
         finalExpenses.append(expense)
  
  for expense in fetchedItems:
    if ("|other|" in expense["object"]):
      finalExpenses.append(expense)
  
  c1={"status":"success","user":finalUserJSON,"isUserNew":isUserNew,"expenses":finalExpenses,"message":"verification successful"}
  Otp.objects.filter(mobilenumber = mobile_number).delete()
  return HttpResponse(json.dumps(c1),content_type="application/json")
 else:
  c1={"status":"error","message":"incorrect otp"}
  return HttpResponse(json.dumps(c1),content_type="application/json")

@csrf_exempt
def refreshAPI(request):
 data = request.body
 data = json.loads(data)
 mobile_number = data["userNumber"]
 print mobile_number

 groupIDs =  Expensedetails.objects.filter(persons__contains = mobile_number, id1 = "Group Creation", expenseVersion = "latest")
 groupIDsData = serializers.serialize("json",groupIDs)
 groupIDsData = json.loads(groupIDsData)
 groupIDsList = []
 for group in groupIDsData:
   groupIDsList.append(group["fields"]["object"].split("##")[0])
 groupIDsList.append("|other|")

 finalExpenses = []
 idQuery = reduce(operator.or_,(Q(object__contains = groupID)for groupID in groupIDsList ))
 syncedString = mobile_number + "_0"
 expenses  =  Expensedetails.objects.filter(idQuery, persons__contains = mobile_number, syncedString__contains = syncedString)
 expensesData = serializers.serialize("json",expenses)
 expensesData = json.loads(expensesData)
 newSyncedString = mobile_number + "_1"
 for expense in expensesData:
   expenseRow = expense["fields"]
   newVal = expenseRow["syncedString"].replace(syncedString, newSyncedString)
   expenseRow["syncedString"] = newVal
   Expensedetails.objects.filter(idQuery, persons__contains = mobile_number, syncedString__contains = syncedString).update(syncedString = newVal) 
   finalExpenses.append(expenseRow)
 c1={"status":"success","message":"Refresh successfull","updates":finalExpenses}
 #Expensedetails.objects.filter(idQuery, persons__contains = mobile_number, syncedString__contains = syncedString).update(syncedString = F('syncedString').replace(syncedString,newSyncedString))
 return HttpResponse(json.dumps(c1),content_type="application/json")

def detaill2(request,store_id,message):
    mobile_number = request.GET.get('', store_id)
    message =request.GET.get('', message)
    print mobile_number
    print message
    d ={'mobile_number':mobile_number,'message':message}
    a= json.dumps(d)
    return HttpResponse(a)
            
def FCMAPI(request,tokenid):
   token_id= str(tokenid)
   print "token_id =" +token_id
   new_obj = Fcm() # FCM is a table name
   new_obj.instance_token = token_id
   new_obj.save()
   d= Fcm.objects.values_list('instance_token', flat=True).order_by('p_id')
 
   print d
  # t=json.loads(d)
  # fd=json.dumps(t)

   return HttpResponse(d)
        
#def FCMDATA(request,message_title,message_body):
def FCMDATA(request,userNumber,orderID,merchantName,merchantNumber,userName,itemsList,netPrice,itemPrice,orderNo,status,available,amountItems,confreeStatus,ETA,category,date,merchantFcm):
  from pyfcm import FCMNotification
  push_service = FCMNotification(api_key="AIzaSyD4KKKdU3Vs9-l5aInS_fArrs33zfpcRcQ", proxy_dict="https://fcm.googleapis.com/fcm/send")

# Your api-ey can be gotten from:  https://console.firebase.google.com/project/<project-name>/settings/cloudmessaging
  registration_id = str(merchantFcm)
  #print registration_id 
 # registration_id = "eokhSdiw62A:APA91bG2TeLHBbWG7yqgqjJ9R9Tsq4REy454uKkcsPEWGjaUVJO0t-inEUR-dmm8gpzlPfzPY9OtWsJGLWs3Ypo3zSsS9GTH0GkoO2JjBwjVUY_ZBMQmSTWqoBlb9t-KIUDm6X1Fm5Qz"
  message_title = "Data Merchant Order" 
  d= { "userNumber":userNumber,
   "orderID":orderID,
   "merchantName":merchantName,
   "merchantNumber":merchantNumber,
   "userName":userName,
   "itemsList":itemsList,
   "netPrice":netPrice,
   "itemPrice":itemPrice,
   "orderNo":orderNo,
   "status":status,
   "available":available,
   "amountItems":amountItems,
   "confreeStatus":confreeStatus,
   "ETA":ETA,
   "category":category,
   "date" : date,  
   "fcm":registration_id }
 # print d

  result = push_service.notify_single_device(registration_id=registration_id, message_title=message_title, message_body=d )
  #print message_body
# Send to multiple devices by passing a list of ids
  #d= Fcm.objects.values_list('instance_token', flat=True).order_by('p_id')
 # print d
  #a=[x.encode("utf-8")for x in d]
  #print a
  #registration_ids = a
 # registration_ids = ["dF3sPsoN4WM:APA91bGDQ2mFcPbkYqKOl0OJdKhvCX3xndN7Ek-3ms2rRI_qfcqxdyIpZPYpIkLrCyE_cM_zqWPsb7vuXe_vVyHdFRqDlemYXoKZpZt0nux8qE4FXlXSvPoJNK-K3ZdyGk6dXQj5yAxP","fVKt48LuSBE:APA91bFh1rOCmjTrhz1NZUsdRVCrgay6YRTwj9u5qfMe0IiQO3ZDkzP50hJuNwC6BZZM1lTUJb1FtNNeiCiNAefRuJCQJpBxBXpNPt6dqYVkUyC9ONYWCpXon1J4MLx3ntGAQa2YYycp","eNvxhcQ4zRo:APA91bGwN9g4dpAOW0BvjDlnImiVjnI893JI9rG3J1CSFC8yC6Sm9NtOR5avCZt8VeZeh_L8F5kMpckVBnGzKEW8_PNdzGOv_FQI363lPWkuRGhwm2evGHVumjpJpXm4dfWpGAfEhSYv","cPJ0ZttEsmU:APA91bFQARBaCuF6aFskaTuk_ymz32V8Y-lvFAvUtlz4s2BMQJjZoKZItFPQ22yuVGI-9UgfMWnzGSGsmNlIvfjR_sTZZDx_5f3sLEAQ-VnpGi9UGZmKcFXHBYH5FFZ7mu1A-s-QBpch"]
#message_title = "Uber update"
#message_body = "Hope you're having fun this weekend, don't forget to check today's news"
  #result = push_service.notify_multiple_devices(registration_ids=registration_ids, message_title=message_title, message_body=message_body)
 
  print result
  t=json.dumps(result)
  if(result["success"]==1):
   return HttpResponse("your message has been sent successfully")
  else:
   #return HttpResponse("NOT sent message somthing went wrong") 
   return HttpResponse(json.dumps(d))

def FCMDATA1(request,message_title,message_body):
  from pyfcm import FCMNotification

  push_service = FCMNotification(api_key="AIzaSyD4KKKdU3Vs9-l5aInS_fArrs33zfpcRcQ", proxy_dict="https://fcm.googleapis.com/fcm/send")

  registration_id="eokhSdiw62A:APA91bG2TeLHBbWG7yqgqjJ9R9Tsq4REy454uKkcsPEWGjaUVJO0t-inEUR-dmm8gpzlPfzPY9OtWsJGLWs3Ypo3zSsS9GTH0GkoO2JjBwjVUY_ZBMQmSTWqoBlb9t-KIUDm6X1Fm5Qz"

  message_title = message_title 
  message_body = { "userNumber":"userNumber",
   "orderID":"orderID",
   "merchantName":"merchantName",
   "merchantNumber":"merchantNumber",
   "userName":"userName",
   "itemsList":"itemsList",
   "netPrice":"netPrice",
   "itemPrice":"itemPrice",
   "orderNo":"orderNo",
   "status":"status",
   "available":"available",
   "amountItems":"amountItems",
   "confreeStatus":"confreeStatus",
   "ETA":"ETA",
   "category":"category",
   "Date" :" date" }
 
  result = push_service.notify_single_device(registration_id=registration_id, message_title=message_title, message_body=message_body )
  print result
  t=json.dumps(result)
  if(result["success"]==1):
   return HttpResponse("your message has been sent successfully")
  else:
   #return HttpResponse("NOT sent message somthing went wrong")
   return HttpResponse(json.dumps(t))

def fcmapi2(request,data,fcmid,order_id):
#def FCMDATA1(request,message_title,message_body):
  from pyfcm import FCMNotification

  push_service = FCMNotification(api_key="AIzaSyD4KKKdU3Vs9-l5aInS_fArrs33zfpcRcQ", proxy_dict="https://fcm.googleapis.com/fcm/send")

 # registration_id="eokhSdiw62A:APA91bG2TeLHBbWG7yqgqjJ9R9Tsq4REy454uKkcsPEWGjaUVJO0t-inEUR-dmm8gpzlPfzPY9OtWsJGLWs3Ypo3zSsS9GTH0GkoO2JjBwjVUY_ZBMQmSTWqoBlb9t-KIUDm6X1F$
  registration_id=fcmid
  message_title = "hi"
  d = {"message_body":data,"order_id":order_id}

  result = push_service.notify_single_device(registration_id=registration_id,message_title=message_title,message_body =d)
  print result
  t=json.dumps(result)
  if(result["success"]==1):
   return HttpResponse("your message has been sent successfully")
  else:
   #return HttpResponse("NOT sent message somthing went wrong")
   return HttpResponse(json.dumps(t))

def API8(request,murchant_number):
 marchant_data=Merchantofferings.objects.filter(merchantnumber=murchant_number)
 murchant_data= serializers.serialize("json",marchant_data)
 murchant_data=json.loads(murchant_data)
 c1=json.loads(json.dumps(murchant_data))
 d2={"merchant_data":c1}
 fd=json.dumps(d2,indent=2)
 return HttpResponse(fd,content_type="application/json")

def API11(request,user_number,order_id):
 userorder_data=Userorder.objects.filter(usernumber=user_number,orderid__contains=order_id)
 userorder_data= serializers.serialize("json",userorder_data)
 userorder_data=json.loads(userorder_data)
# print userorder_data
 status=dpath.util.get(userorder_data, '/0/fields/status')
 print "check" +" "+ str(status)
 c1=json.loads(json.dumps(userorder_data))
 print c1
 d2={"userorder_data":c1}
 fd=json.dumps(d2,indent=4)
 if(status!=0):
  return HttpResponse(fd,content_type="application/json")
 else:
  return HttpResponse("status = 0,to get data,there should be status != 0")

@csrf_exempt
def walletAPI(request):          #(Wallet API) 
 print "inside api call"
 print request.method
 data = json.loads(request.body)
 requiredFunction= data['requiredFunction']
 domainType= data['domainType']
 userNumber= data['userNumber']
 incomingjson=data['incomingJson']
 
 user = User.objects.filter(number = userNumber)
 user_data = json.loads(serializers.serialize("json",user))
 consumerID = user_data[0]["fields"]["consumerID"]
 
 if(domainType=="sandBox"):
  domain="http://180.179.146.81"
 else:
  domain="https://shmart.in"
 
 if(requiredFunction=="getBalance"):
  return HttpResponse(getWalletResponse(domain +'/wallet/v1/balances/general/consumer_id/'+consumerID,"get",incomingjson ))
  
 elif(requiredFunction=="checkUserActivated"):
  return HttpResponse(getWalletResponse(domain +'/wallet/v1/customers/activation_status/consumer_id/'+consumerID,"get",incomingjson ))

 elif(requiredFunction=="getTransactionHistory"):
  return HttpResponse(getWalletResponse(domain +'/wallet/v1/transactions/list/consumer_id/'+consumerID,"get",incomingjson ))
  
 elif(requiredFunction=="getBeneficiaryList"):
  return HttpResponse(getWalletResponse(domain +'/wallet/v1/customers/list_beneficiary/consumer_id/'+consumerID,"get",incomingjson ))
 
 elif(requiredFunction=="getBalanceLimits"):
  return HttpResponse(getWalletResponse(domain +'/wallet/v1/balances/availableLimit',"post",incomingjson ))

 elif(requiredFunction=="createWalletAccount"):
  return HttpResponse(getWalletResponse(domain +'/wallet/v1/customers/create',"post",incomingjson ))

 elif(requiredFunction=="generateOTP"):
  return HttpResponse(getWalletResponse(domain +'//wallet/v1/customers/generateotp',"post",incomingjson ))

 elif(requiredFunction=="activateWalletAccount"):
  return HttpResponse(getWalletResponse(domain +'//wallet/v1/customers/activate',"post",incomingjson ))

 elif(requiredFunction=="doBankTransfer"):
  return HttpResponse(getWalletResponse(domain +'/wallet/v1/transfers/withdraw',"post",incomingjson ))

 elif(requiredFunction=="doWalletToWalletTransfer"):
  return HttpResponse(getWalletResponse(domain +'/wallet/v1/wallet_transfers/',"post",incomingjson ))

 elif(requiredFunction=="doMerchantPayment"):
  return HttpResponse(getWalletResponse(domain +'/wallet/v1/debits/general',"post",incomingjson ))  

 elif(requiredFunction=="creditUserWallet"):
  return HttpResponse(getWalletResponse(domain +'/wallet/v1/credits/general',"post",incomingjson ))

 elif(requiredFunction=="addBeneficiary"):
  return HttpResponse(getWalletResponse(domain +'/wallet/v1/transfers/create' ,"post",incomingjson ))
 
 elif(requiredFunction=="addFundThroughiFrame"):
  return HttpResponse(getWalletResponse(domain +'/wallet/v1/funds/create_iframe',"post",incomingjson ))

 elif(requiredFunction=="deleteBeneficiary"):
  return HttpResponse(getWalletResponse(domain +'/wallet/v1/transfers/deletebeneficiary',"post",incomingjson ))

def getWalletResponse(urlString, requestMethod, incomingJson):
  MERCHANT_USERNAME="0299af1022b234007dd3e93738d4939d"
  MERCHANT_PASSWORD="ef39f0a342da57b6b30f00ce427c01fc"
  headers = {'content-type':'application/json','Accept':'application/json'}
  if (requestMethod == "get"):
    res=requests.get(urlString, auth=(MERCHANT_USERNAME,MERCHANT_PASSWORD),headers=headers)
  else:
    res=requests.post(urlString,auth=(MERCHANT_USERNAME,MERCHANT_PASSWORD),headers=headers,data=json.dumps(incomingJson))
  return json.loads(json.dumps(res.text,indent=4))

@csrf_exempt
def expenseAddAPI(request):    
 data = json.loads(request.body)
 expense = data["expense"]
 if(addExpenseObject(expense) == 0):
  c1={"status":"error","message":"Error adding expense"}
 else:
  c1={"status":"success","data":"Expense added successfully"}
  print getFCMTokenList(expense)
  connectFCM("expenseAdd",data,getFCMTokenList(expense))
 return HttpResponse(json.dumps(c1),content_type="application/json")

@csrf_exempt
def expenseUpdateAPI(request):
 data = json.loads(request.body)
 addExpenseObject(data["oldJSON"])
 if(updateExpenseObject(data["newJSON"]) == 0):
  response = {"status":"error","message":"Error updating expense"}
 else:
  connectFCM("expenseUpdate",data,list(set(getFCMTokenList(data["oldJSON"]))|set(getFCMTokenList(data["newJSON"]))))
  response = {"status":"success","message":"Expense updated successfully"}
 return HttpResponse(json.dumps(response),content_type="application/json") 

@csrf_exempt
def expenseDeleteAPI(request):
 data = json.loads(request.body)
 expense = data["expense"]
 if(updateExpenseObject(expense) != 1):
  response = {"status":"error","message":"Error deleting expense"}
 else:
  connectFCM("expenseDelete",data,getFCMTokenList(expense))
  response = {"status":"success","data":"Expense deleted successfully"}
 return HttpResponse(json.dumps(response),content_type="application/json")

def updateExpenseObject (new_data):
 id1=new_data["id1"]
 object=new_data["object"]
 description = new_data["description"]
 sharesValues = new_data["sharesValues"]
 persons = new_data["persons"]
 deleted = new_data["deleted"]
 object = new_data["object"]
 addedby = new_data["addedby"]
 id1 = new_data["id1"]
 owner = new_data["owner"]
 expenseVersion = new_data["expenseVersion"]
 shares = new_data["shares"]
 personsNames = new_data["personsNames"]
 date = new_data["date"]
 distribution = new_data["distribution"]
 syncedString = new_data["syncedString"]
 amount = new_data["amount"]
 Expensedetails.objects.filter(id1=id1,expenseVersion = expenseVersion,object__contains = object.split("##")[0]).update(description =description ,sharesValues=sharesValues ,persons =persons ,amount=amount,object =object ,addedby =addedby ,id1 =id1 , owner = owner , expenseVersion = expenseVersion ,shares =shares,personsNames=personsNames,date =date ,distribution =distribution ,syncedString =syncedString ,deleted = deleted) 
 d1 = Expensedetails.objects.filter(description =description ,sharesValues=sharesValues,persons = persons,amount=amount,object =object ,addedby =addedby ,id1 =id1 , owner = owner , expenseVersion = expenseVersion ,shares =shares,personsNames=personsNames,date =date ,distribution =distribution ,syncedString =syncedString , deleted = deleted)
 return d1.count()

def addExpenseObject (data):
 new_obj = Expensedetails() # expensedetails is a table name
 new_obj.description = data["description"]
 new_obj.sharesValues = data["sharesValues"]
 new_obj.persons = data["persons"]
 new_obj.deleted = data["deleted"]
 new_obj.object = data["object"]
 new_obj.addedby = data["addedby"]
 new_obj.id1 = data["id1"]
 new_obj.amount = data["amount"]
 new_obj.owner = data["owner"]
 new_obj.expenseVersion = data["expenseVersion"]
 new_obj.shares = data["shares"]
 new_obj.personsNames = data["personsNames"]
 new_obj.date = data["date"]
 new_obj.distribution = data["distribution"]
 new_obj.syncedString = data["syncedString"]
 new_obj.save()
 d1 = Expensedetails.objects.filter(id1=data["id1"],expenseVersion = data["expenseVersion"],object__contains = data["object"])
 return d1.count()

def getFCMTokenList(expense):
 numberString = expense["persons"][:-1]
 numberList = numberString.split(":")
 idQuery = reduce(operator.or_,(Q(number = number)for number in numberList))
 users =  User.objects.filter(idQuery)
 users = json.loads(serializers.serialize("json",users))
 fcmTokenList = []
 for user in users:
  fcmTokenList.append(user["fields"]["fcmToken"])
 fcmTokenList =[x.encode("utf-8")for x in fcmTokenList]
 return fcmTokenList

@csrf_exempt
def groupAddAPI(request):
 data = json.loads(request.body)
 group = data["group"]
 if(addExpenseObject(group) != 1):
  c1={"status":"error","message":"Error adding group"}
 else:
  connectFCM("groupAdd",data,getFCMTokenList(group))
  c1={"status":"success","data":"Group added successfully"}
 return HttpResponse(json.dumps(c1),content_type="application/json")

@csrf_exempt
def groupUpdateAPI(request):
 data = json.loads(request.body)
 addExpenseObject(data["oldJSON"])
 if(updateExpenseObject(data["newJSON"]) != 1):
  response = {"status":"error","message":"Error updating expense"}
 else:
  connectFCM("groupUpdate",data,list(set(getFCMTokenList(data["oldJSON"]))|set(getFCMTokenList(data["newJSON"]))))
  response = {"status":"success","data":"Expense updated successfully"}
 return HttpResponse(json.dumps(response),content_type="application/json") 
@csrf_exempt
def groupDeleteAPI(request):
 data = json.loads(request.body)
 print data
 group=data["group"]
 print group
 id1=group["id1"]
 expenseVersion=group["expenseVersion"]
 object = group["object"].split("##")[0]

 userNumber=data["userNumber"] 
 d2 = Expensedetails.objects.filter(id1=id1,expenseVersion = expenseVersion,object__contains = object)
 data = json.loads(serializers.serialize("json",d2))
 persons=data[0]["fields"]["persons"]
 groupDeletedBy=data[0]["fields"]["groupDeletedBy"]
 
 if(userNumber in persons):
  persons.replace(userNumber+":","")
 if (groupDeletedBy):
  groupDeletedBy = userNumber + ":"
 else:
  groupDeletedBy = groupDeletedBy + userNumber + ":"

 Expensedetails.objects.filter(id1=id1,expenseVersion = expenseVersion,object__contains = object).update(persons=persons,groupDeletedBy=groupDeletedBy)
 d2 = Expensedetails.objects.filter(id1=id1,expenseVersion = expenseVersion,object__contains = object,persons=persons,groupDeletedBy=groupDeletedBy)
 data = json.loads(serializers.serialize("json",d2))
 if(len(data) != 1):
  response = {"status":"error","message":"Error deleting group"}
 else:
  response = {"status":"success","data":"Group deleted successfully"}
 return HttpResponse(json.dumps(response),content_type="application/json")
